class Forum
  attr_accessor :threads

  SECTIONS = %w[/b/ /m/ /tech/ /art/]

  COMMON_RUSSIAN_WORDS = %w[–∏ –≤ –Ω–µ –Ω–∞ —Å —á—Ç–æ —è –æ–Ω –æ–Ω–∞ —ç—Ç–æ –∫–∞–∫ –¥–∞ —Ç—ã –±—ã–ª –±—ã –≤—Å–µ]
  
  BLACKLISTED_WORDS = %w[–≥—Ä—É–ø–ø–∞ —Ä–µ–∫–ª–∞–º–∞ –∞–∫—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à –ø–æ–¥–∞—Ä–æ–∫] # –ü—Ä–∏–º–µ—Ä —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

  def initialize
    @threads = []
    load_threads
  end

  def add_thread(title, section)
    id = @threads.length
    @threads << { id: id, title: title, section: section, comments: [], last_active: Time.now.iso8601 }
    message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ - #{title} (#{section})\n\nhttps://dassie-moral-gator.ngrok-free.app#{section}thread/#{id}\n\n@Y0D9ch"

    send_telegram_message(message, false) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
    
    puts "–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–¥: #{title} –≤ —Ä–∞–∑–¥–µ–ª: #{section}" # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    save_threads
    id
  end
  
  def add_comment(thread_id, comment)
    thread_index = @threads.find_index { |thread| thread[:id] == thread_id }

    if thread_index
      if spam_detected?(thread_index, comment)
        return
      end

      @threads[thread_index][:comments] << comment
      @threads[thread_index][:last_active] = Time.now.iso8601 
      save_threads
      
      message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ```\n#{comment}\n```\n\n[>>> –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–¥—É](https://dassie-moral-gator.ngrok-free.app#{@threads[thread_index][:section]}thread/#{thread_id})\n\n@Y0D9ch"
      send_telegram_message(message, false) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
      
    else
      puts "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–¥–∞: #{thread_id}" # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    end
  end

  private

  def send_telegram_message(message, raid_alert = false)
    chat_id = raid_alert ? File.read("bot.chid") : File.read("bot.chatid") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞

    Telegram::Bot::Client.run(File.read("bot.token")) do |bot|
      bot.api.send_message(chat_id: chat_id, text: message, parse_mode: 'Markdown')
    end
  end

  def spam_detected?(thread_index, comment)
    normalized_comment = comment.downcase # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    return false if contains_url?(normalized_comment) # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å URL

    recent_comments = @threads[thread_index][:comments].last(2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if recent_comments.size == 2 && recent_comments.all? { |c| c.downcase == normalized_comment }
      handle_spam_alert(thread_index)
      return true
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞
    if contains_blacklisted_words?(normalized_comment) || floating_point_spam?(normalized_comment) || repeated_character?(normalized_comment) || contains_repeated_patterns?(normalized_comment) || floating_point_with_text?(normalized_comment)
      handle_spam_alert(thread_index)
      return true
    end
    
    false 
  end

  def handle_spam_alert(thread_index)
    current_time = Time.now

    last_spam_alert_time = @threads[thread_index][:last_spam_alert_sent]
    
    # –ü—Ä–∏–≤–æ–¥–∏–º last_spam_alert_time –∫ –æ–±—ä–µ–∫—Ç—É Time, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    last_spam_alert_time = Time.parse(last_spam_alert_time) if last_spam_alert_time.is_a?(String)

    if last_spam_alert_time.nil? || (current_time - last_spam_alert_time > 300)
      message = "üö´ *Yoda Alert!*\n\n–ê–≤—Ç–æ–º–æ–¥ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Ä–µ–π–¥. –†–µ–π–¥ –±—ã–ª –æ—Ç–±–∏—Ç.\n\n@Y0D9ch | @Y0D9alerts"
      send_telegram_message(message, true) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–π–¥-–∞–ª–µ—Ä—Ç –≤ –∫–∞–Ω–∞–ª

      @threads[thread_index][:last_spam_alert_sent] = current_time.iso8601 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
    end
  end

  def contains_blacklisted_words?(comment)
    BLACKLISTED_WORDS.any? { |word| comment.include?(word) }
  end

  def contains_url?(comment)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
    comment.match?(/https?:\/\/[\S]+/) || comment.match?(/www\.[\S]+/)
  end

  def random_number?(comment)
    comment.match?(/^\d+$/) || comment.match?(/^(?:\d+\s*){3,}$/) 
  end

  def nonsensical_message?(comment)
    words = comment.split(/\s+/).map(&:downcase)
    
    meaningful_words_count = words.count { |word| !COMMON_RUSSIAN_WORDS.include?(word) }
    
    meaningful_words_count < 2 # –°—á–∏—Ç–∞–µ–º –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
  end

  def repeated_character?(comment)
    return false if comment.empty?
    
    comment.chars.uniq.length == 1 # –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –¥–ª–∏–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 1.
  end

  def floating_point_spam?(comment)
    has_floating_point_numbers = comment.scan(/\d+\.\d+/).any?
    
    has_repeated_sequences = comment.match?(/([A-Za-z])\1{2,}/)

    has_floating_point_numbers && has_repeated_sequences
  end
  
  def contains_repeated_patterns?(comment)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "abcabc" –∏–ª–∏ "123123")
    comment.match?(/(.+)\1/)
  end
  
  def floating_point_with_text?(comment)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π –∑–∞–ø—è—Ç–æ–π —Ä—è–¥–æ–º —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0.631464 –†–ï–î–í–ò–ñ–ù")
    comment.match?(/\d+\.\d+\s+[A-Za-z–ê-–Ø–∞-—è]+/)
  end

  def save_threads
    File.open('threads.json', 'w') do |file|
      file.write(JSON.pretty_generate(@threads))
    end
  end

  def load_threads
    if File.exist?('threads.json')
      @threads = JSON.parse(File.read('threads.json'), symbolize_names: true)
      @threads.each do |thread|
        thread[:last_active] ||= Time.now.iso8601 
        thread[:spam_alert_sent] ||= false 
        thread[:last_spam_alert_sent] ||= nil # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ø–∞–º–µ
      end
    end
end
end