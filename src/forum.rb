class Forum
  attr_accessor :threads

  SECTIONS = %w[/b/ /m/ /tech/ /art/]

  def initialize
    @threads = []
    load_threads
  end


  def add_thread(title, section)
    id = @threads.length # Use array length as unique identifier
    @threads << { id: id, title: title, section: section, comments: [], last_active: Time.now.iso8601 }
    message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ - #{title} (#{section})\n\nhttps://dassie-moral-gator.ngrok-free.app#{section}thread/#{id}   \n\n@Y0D9ch"
    
    Telegram::Bot::Client.run(File.read("bot.token")) do |bot|
      bot.api.send_message(chat_id: File.read("bot.chatid"), text: message, parse_mode: 'Markdown')
    end
    
    puts "Adding thread: #{title} in section: #{section}" # Debugging output
    save_threads
    id # Return the new thread's identifie
  end
  
  def add_comment(thread_id, comment)
    thread_index = @threads.find_index { |thread| thread[:id] == thread_id }
  
    if thread_index
      # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      recent_comments = @threads[thread_index][:comments].last(2)
  
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
      if recent_comments.size == 2 && recent_comments.all? { |c| c == comment }
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª –æ —Å–ø–∞–º–µ
        if @threads[thread_index][:spam_alert_sent].nil? || !@threads[thread_index][:spam_alert_sent]
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∞–º–µ
          message = "üö´ *Yoda Alert!*\n\n–ê–≤—Ç–æ–º–æ–¥ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Ä–µ–π–¥. –†–µ–π–¥ –±—ã–ª –æ—Ç–±–∏—Ç.\n\n@Y0D9ch"
          Telegram::Bot::Client.run(File.read("bot.token")) do |bot|
            bot.api.send_message(chat_id: File.read("bot.chatid"), text: message, parse_mode: 'Markdown')
          end
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∞–º–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          @threads[thread_index][:spam_alert_sent] = true
        end
  
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –±–æ–ª–µ–µ –¥–≤—É—Ö —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        return
      else
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º
        @threads[thread_index][:spam_alert_sent] = false
      end
  
      # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      @threads[thread_index][:comments] << comment
      @threads[thread_index][:last_active] = Time.now.iso8601 
      save_threads
  
      # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      file = File.read('threads.json')
      data = JSON.parse(file)
  
      # –£–∫–∞–∑—ã–≤–∞–µ–º ID –¥–ª—è –ø–æ–∏—Å–∫–∞
      id_to_find = 12
  
      # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID
      entry = data.find { |item| item["id"] == id_to_find }
  
      message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ```\n#{comment}\n```\n\n[>>> –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–¥—É](https://dassie-moral-gator.ngrok-free.app#{entry["section"]}thread/#{thread_id})\n\n@Y0D9ch"
  
      Telegram::Bot::Client.run(File.read("bot.token")) do |bot|
        bot.api.send_message(chat_id: File.read("bot.chatid"), text: message, parse_mode: 'Markdown')
      end
  
    else
      puts "Invalid thread id: #{thread_id}" # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    end
  end
  
  
  
  private

  def save_threads
    File.open('threads.json', 'w') do |file|
      file.write(JSON.pretty_generate(@threads))
    end
  end

  def load_threads
    if File.exist?('threads.json')
      @threads = JSON.parse(File.read('threads.json'), symbolize_names: true)
      # Ensure all threads have a last_active value
      @threads.each do |thread|
        thread[:last_active] ||= Time.now.iso8601 # Set to current time if nil
      end
    end
  end
end
