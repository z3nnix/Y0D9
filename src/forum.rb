class Forum
  attr_accessor :threads

  SECTIONS = %w[/b/ /m/ /tech/ /art/] # Valid sections for threads

  COMMON_RUSSIAN_WORDS = %w[–∏ –≤ –Ω–µ –Ω–∞ —Å —á—Ç–æ —è –æ–Ω –æ–Ω–∞ —ç—Ç–æ –∫–∞–∫ –¥–∞ —Ç—ã –±—ã–ª –±—ã –≤—Å–µ]
  
  BLACKLISTED_WORDS = %w[–≥—Ä—É–ø–ø–∞ —Ä–µ–∫–ª–∞–º–∞ –∞–∫—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à –ø–æ–¥–∞—Ä–æ–∫] # –ü—Ä–∏–º–µ—Ä —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

  def initialize
    @threads = []
    load_threads
  end

  def add_thread(title, section)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ (—Ä–∞–∑–¥–µ–ª–∞)
    unless valid_section?(section)
      puts "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª '#{section}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: #{SECTIONS.join(', ')}." # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      return
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–¥–∞ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ
    if thread_exists_in_section?(section)
      puts "–û—à–∏–±–∫–∞: –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–¥. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Ç–∫—É –≤ –≤–µ—Ç–∫–µ." # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      return
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–¥–∞
    if thread_spam_detected?(title)
      puts "–¢—Ä–µ–¥ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '#{title}' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–∞–º." # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      return
    end

    id = @threads.length
    @threads << { id: id, title: title, section: section, comments: [], last_active: Time.now.iso8601 }
    message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ - #{title} (#{section})\n\nhttps://dassie-moral-gator.ngrok-free.app#{section}thread/#{id}\n\n@Y0D9ch"

    send_telegram_message(message, false) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
    
    puts "–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–¥: #{title} –≤ —Ä–∞–∑–¥–µ–ª: #{section}" # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    save_threads
    id
  end
  
  def add_comment(thread_id, comment)
    thread_index = @threads.find_index { |thread| thread[:id] == thread_id }

    if thread_index
      if spam_detected?(thread_index, comment)
        return
      end

      @threads[thread_index][:comments] << comment
      @threads[thread_index][:last_active] = Time.now.iso8601 
      save_threads
      
      message = "üü¢ *Yoda Alert!*\n\n–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ```\n#{comment}\n```\n\n[>>> –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–¥—É](https://dassie-moral-gator.ngrok-free.app#{@threads[thread_index][:section]}thread/#{thread_id})\n\n@Y0D9ch"
      send_telegram_message(message, false) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–π —á–∞—Ç
      
    else
      puts "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–¥–∞: #{thread_id}" # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    end
  end

  private

  def send_telegram_message(message, raid_alert = false)
    chat_id = raid_alert ? File.read("bot.chid") : File.read("bot.chatid") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞

    Telegram::Bot::Client.run(File.read("bot.token")) do |bot|
      bot.api.send_message(chat_id: chat_id, text: message, parse_mode: 'Markdown')
    end
  end

  def valid_section?(section)
    SECTIONS.include?(section) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
  end

  def thread_exists_in_section?(section)
    @threads.any? { |thread| thread[:section] == section } # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
  end

  def spam_detected?(thread_index, comment)
    normalized_comment = comment.downcase # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

    return false if contains_url?(normalized_comment) # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å URL

    recent_comments = @threads[thread_index][:comments].last(2)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if recent_comments.size == 2 && recent_comments.all? { |c| c.downcase == normalized_comment }
      handle_spam_alert(thread_index)
      return true
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞
    if contains_blacklisted_words?(normalized_comment) || floating_point_spam?(normalized_comment) || repeated_character?(normalized_comment) || contains_repeated_patterns?(normalized_comment) || floating_point_with_text?(normalized_comment) || contains_mixed_case_spam?(comment) || contains_uuid?(comment)
      handle_spam_alert(thread_index)
      return true
    end
    
    false 
  end
  
  def thread_spam_detected?(title)
    normalized_title = title.downcase # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    
    return false if contains_url?(normalized_title) # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å URL
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    if contains_blacklisted_words?(normalized_title) || contains_mixed_case_spam?(title) || contains_uuid?(title)
      return true
    end
    
    false 
  end

  def contains_uuid?(comment)
    uuid_pattern = /\b[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\b/i
    
    comment.match?(uuid_pattern)
  end

  def contains_mixed_case_spam?(comment)
    mixed_case_pattern = /(?=.*[A-Za-z])(?=.*[–ê-–Ø–∞-—è])(?=.*[A-Z])(?=.*[–∞-—è])/
    
    return true if comment.match?(mixed_case_pattern)

    mixed_case_repetitive_pattern = /([a-zA-Z–∞-—è–ê-–Ø—ë–Å]{2,})/i
    
    comment.scan(mixed_case_repetitive_pattern).each do |word|
      if word.first.downcase != word.first && word.first.upcase != word.first
        return true
      end
    end
    
    false
  end

  def handle_spam_alert(thread_index)
    current_time = Time.now

    last_spam_alert_time = @threads[thread_index][:last_spam_alert_sent]
    
    last_spam_alert_time = Time.parse(last_spam_alert_time) if last_spam_alert_time.is_a?(String)

    if last_spam_alert_time.nil? || (current_time - last_spam_alert_time > 300)
      message = "üö´ *Yoda Alert!*\n\n–ê–≤—Ç–æ–º–æ–¥ —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Ä–µ–π–¥. –†–µ–π–¥ –±—ã–ª –æ—Ç–±–∏—Ç.\n\n@Y0D9ch | @Y0D9alerts"
      send_telegram_message(message, true) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–π–¥-–∞–ª–µ—Ä—Ç –≤ –∫–∞–Ω–∞–ª

      @threads[thread_index][:last_spam_alert_sent] = current_time.iso8601 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
    end
  end

  def contains_blacklisted_words?(comment)
    BLACKLISTED_WORDS.any? { |word| comment.include?(word) }
  end

  def contains_url?(comment)
    comment.match?(/https?:\/\/[\S]+/) || comment.match?(/www\.[\S]+/)
  end

  def random_number?(comment)
    comment.match?(/^\d+$/) || comment.match?(/^(?:\d+\s*){3,}$/) 
  end

  def nonsensical_message?(comment)
    words = comment.split(/\s+/).map(&:downcase)
    
    meaningful_words_count = words.count { |word| !COMMON_RUSSIAN_WORDS.include?(word) }
    
    meaningful_words_count < 2 # –°—á–∏—Ç–∞–µ–º –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
  end

  def repeated_character?(comment)
    return false if comment.empty?
    
    comment.chars.uniq.length == 1 # –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –¥–ª–∏–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 1.
  end

  def floating_point_spam?(comment)
    has_floating_point_numbers = comment.scan(/\d+\.\d+/).any?
    
    has_repeated_sequences = comment.match?(/([A-Za-z])\1{2,}/)

    has_floating_point_numbers && has_repeated_sequences
  end
  
  def contains_repeated_patterns?(comment)
    comment.match?(/(.+)\1/)
  end
  
  def floating_point_with_text?(comment)
    comment.match?(/\d+\.\d+\s+[A-Za-z–ê-–Ø–∞-—è]+/)
  end

  def save_threads
    File.open('threads.json', 'w') do |file|
      file.write(JSON.pretty_generate(@threads))
    end
  end

  def load_threads
    if File.exist?('threads.json')
      @threads = JSON.parse(File.read('threads.json'), symbolize_names: true)
      @threads.each do |thread|
        thread[:last_active] ||= Time.now.iso8601 
        thread[:spam_alert_sent] ||= false 
        thread[:last_spam_alert_sent] ||= nil # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ø–∞–º–µ
      end
    end
end
end
